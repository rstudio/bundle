% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bundle_workflows.R
\name{bundle.workflow}
\alias{bundle.workflow}
\alias{bundle_workflow}
\title{Bundle a tidymodels \code{workflow} object}
\usage{
\method{bundle}{workflow}(x, ...)
}
\arguments{
\item{x}{A \link[workflows:workflow]{workflow} object returned
from \link[workflows:workflows-package]{workflows} or other tidymodels packages.}

\item{...}{Not used in this bundler and included for compatibility with
the generic only. Additional arguments passed to this method will return
an error.}
}
\value{
A bundle object with subclass \code{bundled_workflow}.

Bundles are a list subclass with two components:

\item{object}{An R object. Gives the output of native serialization
methods from the model-supplying package, sometimes with additional
classes or attributes that aid portability. This is often
a \link[base:raw]{raw} object.}
\item{situate}{A function. The \code{situate()} function is defined when
\code{\link[=bundle]{bundle()}} is called, though is a loose analogue of an \code{\link[=unbundle]{unbundle()}} S3
method for that object. Since the function is defined on \code{\link[=bundle]{bundle()}}, it
has access to references and dependency information that can
be saved alongside the \code{object} component. Calling \code{\link[=unbundle]{unbundle()}} on a
bundled object \code{x} calls \code{x$situate(x$object)}, returning the
unserialized version of \code{object}. \code{situate()} will also restore needed
references, such as server instances and environmental variables.}

Bundles are R objects that represent a "standalone" version of their
analogous model object. Thus, bundles are ready for saving to file---saving
with \code{\link[base:readRDS]{base::saveRDS()}} is our recommended serialization strategy for bundles,
unless documented otherwise for a specific method.

To restore the inputted model object \code{x} in a new environment, load its
bundle with \code{\link[base:readRDS]{base::readRDS()}} and run \code{\link[=unbundle]{unbundle()}} on it. The output
of \code{\link[=unbundle]{unbundle()}} is a model object that is ready to \code{\link[=predict]{predict()}} on new data,
and other restored functionality (like plotting or summarizing) is supported
as a side effect only.

See \code{vignette("bundle")} for more information on bundling and its motivation.
}
\description{
Bundling a model prepares it to be saved to file and later
restored for prediction in a new R session. See the 'Value' section for
more information on bundles and their usage.
}
\details{
This bundler wraps \code{\link[=bundle.model_fit]{bundle.model_fit()}} and \code{\link[=bundle.recipe]{bundle.recipe()}}.
}
\examples{
\dontshow{if (rlang::is_installed(c("workflows", "parsnip", "recipes", "xgboost"))) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
# fit model and bundle ------------------------------------------------
library(workflows)
library(recipes)
library(parsnip)
library(xgboost)

set.seed(1)

spec <-
  boost_tree(trees = 5, mtry = 3) \%>\%
  set_mode("regression") \%>\%
  set_engine("xgboost")

rec <-
  recipe(mpg ~ ., data = mtcars) \%>\%
  step_log(hp)

mod <-
  workflow() \%>\%
  add_model(spec) \%>\%
  add_recipe(rec) \%>\%
  fit(data = mtcars)

mod_bundle <- bundle(mod)

# then, after saveRDS + readRDS or passing to a new session ----------
mod_unbundled <- unbundle(mod_bundle)
\dontshow{\}) # examplesIf}
}
\seealso{
Other bundlers: 
\code{\link{bundle.H2OAutoML}()},
\code{\link{bundle.keras.engine.training.Model}()},
\code{\link{bundle.lgb.Booster}()},
\code{\link{bundle.luz_module_fitted}()},
\code{\link{bundle.model_fit}()},
\code{\link{bundle.model_stack}()},
\code{\link{bundle.recipe}()},
\code{\link{bundle.step_umap}()},
\code{\link{bundle.train}()},
\code{\link{bundle.xgb.Booster}()},
\code{\link{bundle}()}
}
\concept{bundlers}
