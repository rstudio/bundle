% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bundle_parsnip.R
\name{bundle.model_fit}
\alias{bundle.model_fit}
\alias{bundle_model_fit}
\title{Bundle a parsnip \code{model_fit} object}
\usage{
\method{bundle}{model_fit}(x, ...)
}
\arguments{
\item{x}{A \link[parsnip:model_fit]{model_fit} object returned
from \link[parsnip:parsnip-package]{parsnip} or other tidymodels packages.}

\item{...}{Not used in this bundler and included for compatibility with
the generic only. Additional arguments passed to this method will return
an error.}
}
\value{
A bundle object with subclass \code{bundled_model_fit}.

Bundles are a list subclass with two components:

\item{object}{An R object. Gives the output of native serialization
methods from the model-supplying package, sometimes with additional
classes or attributes that aid portability. This is often
a \link[base:raw]{raw} object.}
\item{situate}{A function. The \code{situate()} function is defined when
\code{\link[=bundle]{bundle()}} is called, though is a loose analogue of an \code{\link[=unbundle]{unbundle()}} S3
method for that object. Since the function is defined on \code{\link[=bundle]{bundle()}}, it
has access to references and dependency information that can
be saved alongside the \code{object} component. Calling \code{\link[=unbundle]{unbundle()}} on a
bundled object \code{x} calls \code{x$situate(x$object)}, returning the
unserialized version of \code{object}. \code{situate()} will also restore needed
references, such as server instances and environmental variables.}

Bundles are R objects that represent a "standalone" version of their
analogous model object. Thus, bundles are ready for saving to file---saving
with \code{\link[base:readRDS]{base::saveRDS()}} is our recommended serialization strategy for bundles,
unless documented otherwise for a specific method.

To restore the inputted model object \code{x} in a new environment, load its
bundle with \code{\link[base:readRDS]{base::readRDS()}} and run \code{\link[=unbundle]{unbundle()}} on it. The output
of \code{\link[=unbundle]{unbundle()}} is a model object that is ready to \code{\link[=predict]{predict()}} on new data,
and other restored functionality (like plotting or summarizing) is supported
as a side effect only.

See \code{vignette("bundle")} for more information on bundling and its motivation.
}
\description{
Bundling a model prepares it to be saved to file and later
restored for prediction in a new R session. See the 'Value' section for
more information on bundles and their usage.
}
\details{
Primarily, these methods call \code{\link[=bundle]{bundle()}} on the output of
\code{\link[parsnip:reexports]{parsnip::extract_fit_engine()}}. See the class of the output of that
function for more details on the bundling method for that object.
}
\section{bundle and butcher}{

The \href{https://butcher.tidymodels.org/}{butcher} package allows you to remove
parts of a fitted model object that are not needed for prediction.

This bundle method is compatible with pre-butchering. That is, for a
fitted model \code{x}, you can safely call:

\if{html}{\out{<div class="sourceCode">}}\preformatted{res <-
  x \%>\%
  butcher() \%>\%
  bundle()
}\if{html}{\out{</div>}}

and predict with the output of \code{unbundle(res)} in a new R session.
}

\examples{
\dontshow{if (rlang::is_installed("parsnip") && rlang::is_installed("xgboost")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
# fit model and bundle ------------------------------------------------
library(parsnip)
library(xgboost)

set.seed(1)

mod <-
  boost_tree(trees = 5, mtry = 3) \%>\%
  set_mode("regression") \%>\%
  set_engine("xgboost") \%>\%
  fit(mpg ~ ., data = mtcars)

mod_bundle <- bundle(mod)

# then, after saveRDS + readRDS or passing to a new session ----------
mod_unbundled <- unbundle(mod_bundle)

mod_unbundled_preds <- predict(mod_unbundled, new_data = mtcars)
\dontshow{\}) # examplesIf}
}
\seealso{
Other bundlers: 
\code{\link{bundle.H2OAutoML}()},
\code{\link{bundle.keras.engine.training.Model}()},
\code{\link{bundle.luz_module_fitted}()},
\code{\link{bundle.model_stack}()},
\code{\link{bundle.recipe}()},
\code{\link{bundle.step_umap}()},
\code{\link{bundle.train}()},
\code{\link{bundle.workflow}()},
\code{\link{bundle.xgb.Booster}()},
\code{\link{bundle}()}
}
\concept{bundlers}
